
export const getTopArtists = async (session, timeRange) => {
  try {
    const response = await fetch(`https://api.spotify.com/v1/me/top/artists?time_range=${timeRange}&limit=25`, {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`getTopArtists error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
  }
};

export const getTopTracks = async (session, timeRange) => {
  try {
    const response = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${timeRange}&limit=25`, {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`getTopTracks error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
  }
};

export const getRecentlyPlayedTracks = async (session) => {
  try {
    const response = await fetch("https://api.spotify.com/v1/me/player/recently-played?limit=25", {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`getRecentlyPlayedTracks error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
  }
};

export const getCurrentPlayingTrack = async (session) => {
  try {
    const response = await fetch("https://api.spotify.com/v1/me/player/currently-playing", {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`getCurrentPlayingTrack error! status: ${response.status}`);
    }

    const data = await response.text();
    return data ? JSON.parse(data) : {};
  } catch (error) {
    console.error('Error:', error);
  }
};

export const getTrackRecommendations = async (session, seedTracks) => {
  try {
    const response = await fetch(`https://api.spotify.com/v1/recommendations?limit=25&seed_tracks=${seedTracks}`, {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`getTrackRecommendations error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
  }
};

export const getTopGenres = async (topArtists) => {
  topArtists = topArtists.items;

  const genreCounts = {};

  topArtists.forEach(artist => {
    artist.genres.forEach(genre => {
      if (genre in genreCounts) {
        genreCounts[genre]++;
      } else {
        genreCounts[genre] = 1;
      }
    });
  });

  const sortedGenres = Object.entries(genreCounts).sort((a, b) => b[1] - a[1]);

  return sortedGenres;
};

export const saveToPlaylist = async (session, trackUris, type) => {
  try {
    const userResponse = await fetch("https://api.spotify.com/v1/me", {
      method: "GET",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!userResponse.ok) {
      throw new Error(`Failed to fetch user data! status: ${userResponse.status}`);
    }

    const data = await userResponse.json();
    const userId = data.id;

    const newPlaylistResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
      method: "POST",
      headers: { Authorization: `Bearer ${session?.accessToken}` },
      body: JSON.stringify({
        name: type,
        description: "Playlist generated by Echo.fm",
        public: false
      }),
    });

    if (!newPlaylistResponse.ok) {
      throw new Error(`Failed to create new playlist! status: ${newPlaylistResponse.status}`);
    }

    const newPlaylist = await newPlaylistResponse.json();

    const response = await fetch(`https://api.spotify.com/v1/playlists/${newPlaylist.id}/tracks?uris=${trackUris}`, {
      method: "POST",
      headers: { Authorization: `Bearer ${session?.accessToken}` }
    });

    if (!response.ok) {
      throw new Error(`saveToPlaylist error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
  }
}